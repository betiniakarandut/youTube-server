import { Buyer } from './Buyer';
import { InvoiceBuyerProvidedInfo } from './InvoiceBuyerProvidedInfo';
import { InvoiceTransaction } from './InvoiceTransaction';
import { MinerFees } from './MinerFees';
import { Shopper } from './Shopper';
import { RefundInfo } from './RefundInfo';
import { SupportedTransactionCurrencies } from './SupportedTransactionCurrencies';
import { InvoiceUniversalCodes } from './InvoiceUniversalCodes';
export interface InvoiceInterface {
    currency: string | null;
    guid: string | null;
    token: string | null;
    price: number | null;
    posData: string | null;
    notificationURL: string | null;
    transactionSpeed: string | null;
    fullNotifications: boolean | null;
    notificationEmail: string | null;
    redirectURL: string | null;
    closeURL: string | null;
    orderId: string | null;
    itemDesc: string | null;
    itemCode: string | null;
    physical: boolean | null;
    paymentCurrencies: string[] | [];
    acceptanceWindow: number | null;
    autoRedirect: boolean | null;
    forcedBuyerSelectedWallet: string | null;
    forcedBuyerSelectedTransactionCurrency: string | null;
    buyer: Buyer | null;
    id: string | null;
    url: string | null;
    status: string | null;
    lowFeeDetected: boolean | null;
    invoiceTime: number | null;
    expirationTime: number | null;
    currentTime: number | null;
    exceptionStatus: string | null;
    targetConfirmations: number | null;
    transactions: InvoiceTransaction | null;
    refundAddresses: unknown | null;
    refundAddressRequestPending: boolean | null;
    buyerProvidedEmail: string | null;
    buyerProvidedInfo: InvoiceBuyerProvidedInfo | null;
    supportedTransactionCurrencies: SupportedTransactionCurrencies | null;
    minerFees: MinerFees | null;
    shopper: Shopper | null;
    billId: string | null;
    refundInfo: RefundInfo | null;
    extendedNotifications: boolean | null;
    transactionCurrency: string | null;
    amountPaid: number | null;
    displayAmountPaid: number | null;
    exchangeRates: Array<[string, Array<[string, number]>]> | null;
    paymentSubtotals: Array<[string, number]> | null;
    paymentTotals: Array<[string, number]> | null;
    paymentDisplayTotals: Array<[string, number]> | null;
    paymentDisplaySubTotals: Array<[string, number]> | null;
    nonPayProPaymentReceived: boolean | null;
    jsonPayProRequired: boolean | null;
    merchantName: string | null;
    bitpayIdRequired: boolean | null;
    underpaidAmount: number | null;
    overpaidAmount: number | null;
    paymentCodes: Array<[string, Array<[string, number]>]> | null;
    isCancelled: boolean | null;
    universalCodes: InvoiceUniversalCodes | null;
    setCurrency(_currency: string): void;
}
export declare class Invoice implements InvoiceInterface {
    currency: string | null;
    guid: string | null;
    token: string | null;
    price: number | null;
    posData: string | null;
    notificationURL: string | null;
    transactionSpeed: string | null;
    fullNotifications: boolean | null;
    notificationEmail: string | null;
    redirectURL: string | null;
    closeURL: string | null;
    orderId: string | null;
    itemDesc: string | null;
    itemCode: string | null;
    physical: boolean | null;
    paymentCurrencies: string[] | [];
    acceptanceWindow: number | null;
    autoRedirect: boolean | null;
    forcedBuyerSelectedWallet: string | null;
    forcedBuyerSelectedTransactionCurrency: string | null;
    buyer: Buyer | null;
    id: string | null;
    url: string | null;
    status: string | null;
    lowFeeDetected: boolean | null;
    invoiceTime: number | null;
    expirationTime: number | null;
    currentTime: number | null;
    exceptionStatus: string | null;
    targetConfirmations: number | null;
    transactions: InvoiceTransaction | null;
    refundAddresses: unknown | null;
    refundAddressRequestPending: boolean | null;
    buyerProvidedEmail: string | null;
    buyerProvidedInfo: InvoiceBuyerProvidedInfo | null;
    supportedTransactionCurrencies: SupportedTransactionCurrencies | null;
    minerFees: MinerFees | null;
    shopper: Shopper | null;
    billId: string | null;
    refundInfo: RefundInfo | null;
    extendedNotifications: boolean | null;
    transactionCurrency: string | null;
    amountPaid: number | null;
    displayAmountPaid: number | null;
    exchangeRates: Array<[string, Array<[string, number]>]> | null;
    paymentSubtotals: Array<[string, number]> | null;
    paymentTotals: Array<[string, number]> | null;
    paymentDisplayTotals: Array<[string, number]> | null;
    paymentDisplaySubTotals: Array<[string, number]> | null;
    nonPayProPaymentReceived: boolean | null;
    jsonPayProRequired: boolean | null;
    merchantName: string | null;
    bitpayIdRequired: boolean | null;
    underpaidAmount: number | null;
    overpaidAmount: number | null;
    paymentCodes: Array<[string, Array<[string, number]>]> | null;
    isCancelled: boolean | null;
    universalCodes: InvoiceUniversalCodes | null;
    /**
     * Constructor, create a minimal request Invoice object.
     *
     * @param price    The amount for which the invoice will be created.
     * @param currency The three digit currency type used to compute the invoice bitcoin amount.
     */
    constructor(price: number, currency: string);
    setCurrency(_currency: string): void;
}
